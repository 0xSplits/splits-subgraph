interface Account {
  id: ID! # ethereum address
  internalBalances: [TokenInternalBalance!]! @derivedFrom(field: "account")
  withdrawals: [TokenWithdrawal!]! @derivedFrom(field: "account")
  upstream: [Recipient!] @derivedFrom(field: "account")
  accountEvents: [AccountEvent!]! @derivedFrom(field: "account")
}

type Token @entity {
  id: ID! # ethereum address
  internalBalances: [TokenInternalBalance!]! @derivedFrom(field: "token")
  withdrawals: [TokenWithdrawal!]! @derivedFrom(field: "token")
}

interface TokenBalance {
  id: ID! # ${prefix}-${accountId}-${tokenId}
  amount: BigInt!
  token: Token!
  account: Account!
}

type TokenInternalBalance implements TokenBalance @entity {
  id: ID! # ib-${accountId}-${tokenId}
  amount: BigInt!
  token: Token!
  account: Account!
}

type TokenWithdrawal implements TokenBalance @entity {
  id: ID! # w-${accountId}-${tokenId}
  amount: BigInt!
  token: Token!
  account: Account!
}

type User implements Account @entity {
  id: ID! # ethereum address
  internalBalances: [TokenInternalBalance!]! @derivedFrom(field: "account")
  withdrawals: [TokenWithdrawal!]! @derivedFrom(field: "account")
  upstream: [Recipient!] @derivedFrom(field: "account")
  accountEvents: [AccountEvent!]! @derivedFrom(field: "account")
}

type Split implements Account @entity {
  id: ID! # ethereum address
  internalBalances: [TokenInternalBalance!]! @derivedFrom(field: "account")
  withdrawals: [TokenWithdrawal!]! @derivedFrom(field: "account")
  upstream: [Recipient!] @derivedFrom(field: "account")
  accountEvents: [AccountEvent!]! @derivedFrom(field: "account")

  controller: Bytes!
  newPotentialController: Bytes!
  distributorFee: BigInt!
  # can't use derived relations inside mapping.ts
  # recipients: [Recipient!]! @derivedFrom(field: "split")
  recipients: [Recipient!]!
  latestBlock: Int!
}

type Recipient @entity {
  id: ID! # ${splitId}-${accountId}
  split: Split!
  account: Account!
  ownership: BigInt!
}

type Transaction @entity {
  id: ID! #txHash
  # can't use derived relations inside mapping.ts
  # distributionEvents: [DistributionEvent!]! @derivedFrom(field: "transaction")
  distributionEvents: [DistributionEvent!]
}

interface AccountEvent {
  id: ID! # ${prefix}-${txHash}-${logIdx}-${accountId}
  timestamp: BigInt!
  account: Account!
  token: Token!
  amount: BigInt!
}

type DistributionEvent implements AccountEvent @entity {
  id: ID! # ${txHash}-${logIdx}
  timestamp: BigInt!
  account: Account!
  token: Token!
  amount: BigInt!

  transaction: Transaction!
  logIndex: BigInt!

  receiveDistributionEvents: [ReceiveDistributionEvent!]! @derivedFrom(field: "distributionEvent")
  distributeDistributionEvent: DistributeDistributionEvent @derivedFrom(field: "distributionEvent")
}

type ReceiveDistributionEvent implements AccountEvent @entity {
  id: ID! # r-de-${txHash}-${logIdx}-${accountId}
  timestamp: BigInt!
  account: Account!
  token: Token!
  amount: BigInt!

  distributionEvent: DistributionEvent!
}

type DistributeDistributionEvent implements AccountEvent @entity {
  id: ID! # d-de-${txHash}-${logIdx}-${accountId}
  timestamp: BigInt!
  account: Account!
  token: Token!
  amount: BigInt!

  distributionEvent: DistributionEvent!
}

type TokenWithdrawalEvent implements AccountEvent @entity {
  id: ID! # we-${txHash}-${logIdx}-${accountId}-${tokenId}
  timestamp: BigInt!
  account: Account!
  token: Token!
  amount: BigInt!
}
