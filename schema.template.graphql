interface Account {
  id: ID! # ethereum address
  internalBalances: [TokenInternalBalance!]! @derivedFrom(field: "account")
  withdrawals: [TokenWithdrawal!]! @derivedFrom(field: "account")
  upstream: [Recipient!] @derivedFrom(field: "account")
  accountEvents: [AccountEvent!]! @derivedFrom(field: "account")
}

type Token @entity {
  id: ID! # ethereum address
  internalBalances: [TokenInternalBalance!]! @derivedFrom(field: "token")
  withdrawals: [TokenWithdrawal!]! @derivedFrom(field: "token")
}

interface TokenBalance {
  id: ID! # ${prefix}-${accountId}-${tokenId}
  amount: BigInt!
  token: Token!
  account: Account!
}

type TokenInternalBalance implements TokenBalance @entity {
  id: ID! # ib-${accountId}-${tokenId}
  amount: BigInt!
  token: Token!
  account: Account!
}

type TokenWithdrawal implements TokenBalance @entity {
  id: ID! # w-${accountId}-${tokenId}
  amount: BigInt!
  token: Token!
  account: Account!
}

type User implements Account @entity {
  id: ID! # ethereum address
  internalBalances: [TokenInternalBalance!]! @derivedFrom(field: "account")
  withdrawals: [TokenWithdrawal!]! @derivedFrom(field: "account")
  upstream: [Recipient!] @derivedFrom(field: "account")
  accountEvents: [AccountEvent!]! @derivedFrom(field: "account")
}

type Split implements Account @entity {
  id: ID! # ethereum address
  internalBalances: [TokenInternalBalance!]! @derivedFrom(field: "account")
  withdrawals: [TokenWithdrawal!]! @derivedFrom(field: "account")
  upstream: [Recipient!] @derivedFrom(field: "account")
  accountEvents: [AccountEvent!]! @derivedFrom(field: "account")

  controller: Bytes!
  newPotentialController: Bytes!
  distributorFee: BigInt!
  # can't use derived relations inside mapping.ts
  # recipients: [Recipient!]! @derivedFrom(field: "split")
  recipients: [Recipient!]!
  latestBlock: Int!
}

type Recipient @entity {
  id: ID! # ${splitId}-${accountId}
  split: Split!
  account: Account!
  ownership: BigInt!
}

type Transaction @entity {
  id: ID! #txHash
  # can't use derived relations inside mapping.ts
  # distributionEvents: [DistributionEvent!]! @derivedFrom(field: "transaction")
  distributionEvents: [DistributionEvent!]
  setSplitEvents: [SetSplitEvent!]
}

interface AccountEvent {
  id: ID! # ${prefix}-${txHash}-${logIdx}-${accountId}
  timestamp: BigInt!
  account: Account!
}

enum SetSplitType {
  create
  update
}

type SetSplitEvent implements AccountEvent @entity {
  id: ID! # sse-${txHash}-${logIdx}
  timestamp: BigInt!
  account: Account!

  transaction: Transaction!
  logIndex: BigInt!
  type: SetSplitType

  recipientAddedEvents: [RecipientAddedEvent!] @derivedFrom(field: "setSplitEvent")
  recipientRemovedEvents: [RecipientRemovedEvent!] @derivedFrom(field: "setSplitEvent")
}

type RecipientAddedEvent implements AccountEvent @entity {
  id: ID!
  timestamp: BigInt!
  account: Account!

  setSplitEvent: SetSplitEvent!
}

type RecipientRemovedEvent implements AccountEvent @entity {
  id: ID!
  timestamp: BigInt!
  account: Account!

  setSplitEvent: SetSplitEvent!
}

type DistributionEvent implements AccountEvent @entity {
  id: ID! # de-${txHash}-${logIdx}
  timestamp: BigInt!
  account: Account!

  transaction: Transaction!
  logIndex: BigInt!
  token: Token!
  amount: BigInt!

  receiveDistributionEvents: [ReceiveDistributionEvent!]! @derivedFrom(field: "distributionEvent")
  distributeDistributionEvent: DistributeDistributionEvent @derivedFrom(field: "distributionEvent")
}

type ReceiveDistributionEvent implements AccountEvent @entity {
  id: ID! # r-de-${txHash}-${logIdx}-${accountId}
  timestamp: BigInt!
  account: Account!

  token: Token!
  amount: BigInt!
  distributionEvent: DistributionEvent!
}

type DistributeDistributionEvent implements AccountEvent @entity {
  id: ID! # d-de-${txHash}-${logIdx}-${accountId}
  timestamp: BigInt!
  account: Account!

  token: Token!
  amount: BigInt!
  distributionEvent: DistributionEvent!
}

type WithdrawalEvent implements AccountEvent @entity {
  id: ID! # we-${txHash}-${logIdx}-${accountId}
  timestamp: BigInt!
  account: Account!

  transaction: Transaction!
  tokenWithdrawalEvents: [TokenWithdrawalEvent!]! @derivedFrom(field: "withdrawalEvent")
}

type TokenWithdrawalEvent @entity {
  id: ID! # t-we-${txHash}-${logIdx}-${accountId}-${tokenId}
  token: Token!
  amount: BigInt!
  withdrawalEvent: WithdrawalEvent!
}

enum ControlTransferType {
  initiate
  cancel
  transfer
}

type ControlTransferEvent implements AccountEvent @entity {
  id: ID! # ct-{txHash}-${logIdx}
  timestamp: BigInt!
  account: Account!

  type: ControlTransferType
  transaction: Transaction!
  fromUserEvent: FromUserControlTransferEvent! @derivedFrom(field: "controlTransferEvent")
  toUserEvent: ToUserControlTransferEvent @derivedFrom(field: "controlTransferEvent")
}

type FromUserControlTransferEvent implements AccountEvent @entity {
  id: ID! # fu-ct-{txHash}-${logIdx}-${accountId}
  timestamp: BigInt!
  account: Account!

  controlTransferEvent: ControlTransferEvent!
}

type ToUserControlTransferEvent implements AccountEvent @entity {
  id: ID! # tu-ct-{txHash}-${logIdx}-${accountId}
  timestamp: BigInt!
  account: Account!

  controlTransferEvent: ControlTransferEvent!
}
